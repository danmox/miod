<launch>

  <!--
      ARGS
  -->

  <arg name="name" default="quadrotor"/>
  <arg name="description"
       default="$(find arl_unity_ros_abstract)/config/quadrotor.yaml"/>

  <arg name="ground_truth" default="true"/>

  <!-- spawn model args -->
  <arg name="x" default="0" />
  <arg name="y" default="0" />
  <arg name="z" default="1" />
  <arg name="roll" default="0" />
  <arg name="pitch" default="0" />
  <arg name="yaw" default="0" />

  <arg name="unity_namespace" default="Simulation/"/>

  <!-- topics / frames args -->
  <arg name="world_frame"        default="world"/>
  <arg name="map_frame"          default="$(arg world_frame)"/>

  <!-- waypoint navigation vel args -->
  <arg name="gdb"                default="false"/> <!-- run nodelet (false) or node in gdb (true) -->
  <arg name="debug"              default="false"/> <!-- set node/nodelet verbosity level to debug -->
  <arg name="position_tol"       default="0.2"/>   <!-- meters -->
  <arg name="heading_tol"        default="0.5"/>   <!-- ~28deg -->
  <arg name="linear_vel_des"     default="1.0"/>   <!-- m/s -->
  <arg name="angular_vel_des"    default="0.5"/>   <!-- rad/s -->

  <!--
      NODES
  -->

  <group ns="$(arg name)">

    <node pkg="arl_unity_ros"
          type="spawn_robot.py"
          name="spawn_$(arg name)"
          output="screen">
      <rosparam command="load" file="$(arg description)" subst_value="true"/>
    </node>

    <!-- static transform to connect tf tree to ground truth -->
    <node if="$(arg ground_truth)"
          pkg="tf2_ros"
          type="static_transform_publisher"
          name="ground_truth_tf_broadcaster"
          args="0 0 0 0 0 0 $(arg name)/TrueState $(arg name)"/>

    <!-- interface for controlling the quad with twist commands -->
    <node pkg="arl_unity_ros_abstract"
          type="twist_to_unity.py"
          name="twist_to_unity_cmd_node">
      <param name="unity_name" value="$(arg name)"/>
      <remap from="unity_cmd" to="/unity_command/command_topic"/>
      <remap from="twist_cmd" to="cmd_vel"/>
    </node>

    <node unless="$(arg gdb)"
          pkg="nodelet"
          type="nodelet"
          name="vel_nav_nodelet"
          output="screen"
          args="standalone intel_aero_navigation/VelNavNodelet">
      <remap from="costmap" to="costmap_2d/costmap/costmap"/>
      <remap from="pose"    to="/unity_ros/$(arg name)/TrueState/pose"/>
      <param name="local_frame"     value="$(arg map_frame)"/>
      <param name="position_tol"    value="$(arg position_tol)"/>
      <param name="heading_tol"     value="$(arg heading_tol)"/>
      <param name="linear_vel_des"  value="$(arg linear_vel_des)"/>
      <param name="angular_vel_des" value="$(arg angular_vel_des)"/>
      <param name="debug"           value="$(arg debug)"/>
    </node>

    <node if="$(arg gdb)"
          pkg="intel_aero_navigation"
          type="vel_nav_node"
          name="vel_nav_node"
          output="screen"
          launch-prefix="gdb --args">
      <remap from="costmap" to="costmap_2d/costmap/costmap"/>
      <remap from="pose"    to="/unity_ros/$(arg name)/TrueState/pose"/>
      <param name="local_frame"     value="$(arg map_frame)"/>
      <param name="position_tol"    value="$(arg position_tol)"/>
      <param name="heading_tol"     value="$(arg heading_tol)"/>
      <param name="linear_vel_des"  value="$(arg linear_vel_des)"/>
      <param name="angular_vel_des" value="$(arg angular_vel_des)"/>
      <param name="debug"           value="$(arg debug)"/>
    </node>

  </group>

</launch>
