<launch>

  <!--
      ARGS
  -->

  <arg name="id"                 default="1" />
  <arg name="robot_ns"           value="$(optenv AGENT aero1)" />


  <!-- global reference datum args -->
  <arg name="datum_lat"  default="-34.918110"/>   <!-- Football field Uy: -34.813442  -56.264768   University Uguguay 2: -34.918110  -56.167703  University Uguguay 1: -34.919144  -56.167607; Philly net 39.941154 -75.198973-->
  <arg name="datum_lon"  default="-56.167703"/>
  <arg name="datum_yaw"  default="0.0"/> <!--0 = right handed (ccw, zero - x- points east, y - north), Philly net 0.4763 Football field Uy: 0.296-->

  <!-- topics / frames args -->
  <arg name="static_map"         default="false"/> <!-- true: a static map will be provided -->
  <arg name="static_map_topic"   default="projected_map"/>
  <arg name="world_frame"        default="world"/>
  <arg name="odom_frame"         default="$(arg robot_ns)/odom"/>
  <arg name="base_frame"         default="$(arg robot_ns)/base_link"/>

  <!-- waypoint navigation args -->
  <arg name="position_tol" 	 default="0.5"/> <!-- meters -->
  <arg name="heading_tol"  	 default="0.5"/> <!-- ~28deg -->

  <!-- mapping / costmap args -->
  <arg name="robot_radius"       default="1.0"/>
  <arg name="inflation_radius"   default="1.0"/>
  <arg name="octomap_resolution" default="0.1"/>
  <arg name="costmap_rate"  if="$(arg static_map)"     value="0.1"/>
  <arg name="costmap_rate"  unless="$(arg static_map)" value="2.0"/>
  <arg name="costmap_frame" if="$(arg static_map)"     value="$(arg world_frame)"/>
  <arg name="costmap_frame" unless="$(arg static_map)" value="$(arg odom_frame)"/>

  <!-- MAVROS args -->
  <arg name="fcu_url" default="udp://127.0.0.1:14550@127.0.0.1:14555"/>

  <!-- routing args -->
  <arg name="networking"     default="true"/> <!-- controls whether robust routing scripts are started -->
  <arg name="server"         default="false"/>
  <arg name="interface"      default="wlp1s0"/>
  <arg name="srv" unless="$(eval arg('server') or not arg('networking'))"/>
  <arg name="routing_script" default="routing_client" unless="$(arg server)"/>
  <arg name="routing_script" default="routing_server" if="$(arg server)"/>
  <arg name="dest_arg"       default=""/>
  <arg name="routing_args"   default="$(arg dest_arg) --srv $(arg srv) --interface $(arg interface)"
       unless="$(eval arg('server') or not arg('networking'))"/>
  <arg name="routing_args"   default="$(arg dest_arg) --interface $(arg interface)"
       if="$(eval arg('server') and arg('networking'))"/>

  <!--
      NODES
  -->

  <!-- automatically record test data -->
  <arg name="server_topics" unless="$(arg server)" value=""/>
  <arg name="server_topics" if="$(arg server)"     value="/network_update /network_visualization /planner /tf /tf_static"/>
  <node pkg="rosbag"
        type="record"
        name="$(arg robot_ns)_bag_recorder"
        output="screen"
        args="-o /home/$(arg robot_ns)/.ros/$(arg robot_ns)
              /$(arg robot_ns)/mavros/global_position/global
              /$(arg robot_ns)/mavros/imu/data
              /$(arg robot_ns)/mavros/setpoint_position/local
              /$(arg robot_ns)/pose
              $(arg server_topics)"/>

  <arg name="start_x"                default="0.0"/>
  <arg name="start_y"                default="0.0"/>
  <arg name="end_x"                  default="20.0"/> <!-- distance agent should travel in a line -->

  <!-- line demo params -->
  <rosparam param="/task_agent_ids">[7]</rosparam> <!-- needed for task agent count -->
  <rosparam param="/comm_agent_ids">[7]</rosparam>
  <param name="/desired_altitude" value="4.0"/>
  <param name="/source_node"      value="7"/>  <!-- TA that flies is a source node-->
  <param name="/start_x"          value="$(arg start_x)"/>
  <param name="/start_y"          value="$(arg start_y)"/>
  <param name="/end_x"            value="$(arg end_x)"/>

  <node pkg="network_status"
        type="routing_visualization_node"
        name="routing_visualization_node"
        output="screen">
    <param name="world_frame" value="world"/>
    <param name="pose_topic"  value="pose"/>
  </node>




  <group ns="$(arg robot_ns)" >



    <!-- MAVROS -->
    <node pkg="mavros"
          type="mavros_node"
          name="mavros"
          clear_params="true"
          output="screen"
          respawn="false">
      <rosparam command="load" file="$(find intel_aero_experiments)/cfg/px4_pluginlists.yaml" />
      <rosparam command="load" file="$(find mavros)/launch/px4_config.yaml" />
      <param name="fcu_url"                          value="$(arg fcu_url)" />
      <param name="local_position/frame_id"          value="$(arg odom_frame)"/>
      <param name="local_position/tf/send"           value="true"/>
      <param name="local_position/tf/frame_id"       value="$(arg odom_frame)"/>
      <param name="local_position/tf/child_frame_id" value="$(arg base_frame)" />
      <param name="imu/frame_id"                     value="$(arg base_frame)"/>
    </node>

    <!-- computes transformation between robot and datum and publishes the
         result as a pose message and transform in the tf tree -->
    <node pkg="intel_aero_navigation"
          type="gps_tf_node"
          name="gps_tf_node"
          output="screen">
      <param name="base_frame"  value="$(arg base_frame)"/>
      <param name="odom_frame"  value="$(arg odom_frame)" />
      <param name="world_frame" value="$(arg world_frame)"/>
      <param name="yaw_offset"  value="0.0"/>
      <param name="debug"       value="false"/>
      <param name="datum_lat"   value="$(arg datum_lat)"/>
      <param name="datum_lon"   value="$(arg datum_lon)"/>
      <param name="datum_yaw"   value="$(arg datum_yaw)"/>
      <remap from="gps" to="mavros/global_position/global"/>
      <remap from="imu" to="mavros/imu/data"/>
    </node>

    <!-- routing script -->
    <node if="$(arg networking)"
          pkg="routing_protocol"
          type="$(arg routing_script)"
          name="$(arg routing_script)_node"
          args="$(arg routing_args)"
          output="screen"/>

    <!-- navigation nodes -->

    <node pkg="nodelet"
          type="nodelet"
          name="px4_waypoint_navigation_nodelet"
          args="standalone intel_aero_navigation/PX4NavNodelet"
          output="screen">
      <param name="local_frame"   value="$(arg odom_frame)"/>
      <param name="position_tol"  value="$(arg position_tol)" />
      <param name="heading_tol"   value="$(arg heading_tol)" />
    </node>

  </group>

</launch>
